//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC898CInitBitmapResources();

static bool bBitmapLoaded = false;


CreateDatabaseDialogBase::CreateDatabaseDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC898CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* BoxSizer1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(BoxSizer1);
    
    wxFlexGridSizer* flexGridSizer12 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer12->SetFlexibleDirection( wxBOTH );
    flexGridSizer12->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    BoxSizer1->Add(flexGridSizer12, 2, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    lbLocation = new wxStaticText(this, wxID_ANY, _("Location"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer12->Add(lbLocation, 1, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    flLocation = new wxFilePickerCtrl(this, wxID_ANY, wxEmptyString, wxT(""), wxT("*.orca"), wxDefaultPosition, wxSize(-1,-1), wxFLP_USE_TEXTCTRL|wxFLP_OVERWRITE_PROMPT|wxFLP_SAVE);
    
    flexGridSizer12->Add(flLocation, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_TOP, 5);
    
    lbStart = new wxStaticText(this, wxID_ANY, _("Start"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer12->Add(lbStart, 1, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    dtStart = new wxDatePickerCtrl(this, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxSize(-1,-1), wxDP_DEFAULT);
    
    flexGridSizer12->Add(dtStart, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_stdBtnSizer17 = new wxStdDialogButtonSizer();
    
    BoxSizer1->Add(m_stdBtnSizer17, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    btOk = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    btOk->SetDefault();
    m_stdBtnSizer17->AddButton(btOk);
    
    btCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer17->AddButton(btCancel);
    m_stdBtnSizer17->Realize();
    
    SetName(wxT("CreateDatabaseDialogBase"));
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    CentreOnParent(wxBOTH);
}

CreateDatabaseDialogBase::~CreateDatabaseDialogBase()
{
}

ExecutionDialogBase::ExecutionDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC898CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxGridBagSizer* gridBagSizer22 = new wxGridBagSizer(0, 0);
    this->SetSizer(gridBagSizer22);
    
    lbBudget = new wxStaticText(this, wxID_ANY, _("Budget:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    gridBagSizer22->Add(lbBudget, wxGBPosition(0,0), wxGBSpan(), wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    txBudget = new wxTextCtrl(this, wxID_ANY, wxT("Text"), wxDefaultPosition, wxSize(-1,-1), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    txBudget->SetHint(wxT(""));
    #endif
    
    gridBagSizer22->Add(txBudget, wxGBPosition(0,1), wxGBSpan(1,2), wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    txEstimateName = new wxTextCtrl(this, wxID_ANY, wxT("Text"), wxDefaultPosition, wxSize(-1,-1), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    txEstimateName->SetHint(wxT(""));
    #endif
    
    gridBagSizer22->Add(txEstimateName, wxGBPosition(1,1), wxGBSpan(1,2), wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    lbEstimated = new wxStaticText(this, wxID_ANY, _("Estimated:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    gridBagSizer22->Add(lbEstimated, wxGBPosition(2,0), wxGBSpan(), wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    txEstimateAmount = new wxTextCtrl(this, wxID_ANY, wxT("Text"), wxDefaultPosition, wxSize(-1,-1), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    txEstimateAmount->SetHint(wxT(""));
    #endif
    
    gridBagSizer22->Add(txEstimateAmount, wxGBPosition(2,1), wxGBSpan(), wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    lbAccounted = new wxStaticText(this, wxID_ANY, _("Accounted"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    gridBagSizer22->Add(lbAccounted, wxGBPosition(3,0), wxGBSpan(), wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    lbLeftover = new wxStaticText(this, wxID_ANY, _("Leftover"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    gridBagSizer22->Add(lbLeftover, wxGBPosition(4,0), wxGBSpan(), wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    txAccounted = new wxTextCtrl(this, wxID_ANY, wxT("Text"), wxDefaultPosition, wxSize(-1,-1), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    txAccounted->SetHint(wxT(""));
    #endif
    
    gridBagSizer22->Add(txAccounted, wxGBPosition(3,1), wxGBSpan(), wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    txLeftover = new wxTextCtrl(this, wxID_ANY, wxT("Text"), wxDefaultPosition, wxSize(-1,-1), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    txLeftover->SetHint(wxT(""));
    #endif
    
    gridBagSizer22->Add(txLeftover, wxGBPosition(4,1), wxGBSpan(), wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    lbExecutions = new wxStaticText(this, wxID_ANY, _("History:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    gridBagSizer22->Add(lbExecutions, wxGBPosition(5,0), wxGBSpan(), wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    gdExecutions = new wxGrid(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxWANTS_CHARS);
    gdExecutions->CreateGrid(0, 0);
    gdExecutions->SetRowLabelAlignment(wxALIGN_RIGHT, wxALIGN_CENTRE);
    gdExecutions->SetColLabelAlignment(wxALIGN_CENTRE, wxALIGN_CENTRE);
    #if wxVERSION_NUMBER >= 2904
    gdExecutions->UseNativeColHeader(true);
    #endif
    gdExecutions->EnableEditing(true);
    
    gridBagSizer22->Add(gdExecutions, wxGBPosition(6,0), wxGBSpan(1,2), wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    gdExecutions->SetMinSize(wxSize(600,250));
    
    btAdd = new wxButton(this, wxID_ANY, _("Add"), wxDefaultPosition, wxSize(-1,-1), 0);
    btAdd->SetDefault();
    
    gridBagSizer22->Add(btAdd, wxGBPosition(7,0), wxGBSpan(), wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    btDelete = new wxButton(this, wxID_ANY, _("Delete"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    gridBagSizer22->Add(btDelete, wxGBPosition(7,1), wxGBSpan(), wxALL|wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL, 5);
    
    btClose = new wxButton(this, wxID_OK, _("Close"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    gridBagSizer22->Add(btClose, wxGBPosition(8,1), wxGBSpan(), wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5);
    
    lbEstimateName = new wxStaticText(this, wxID_ANY, _("Item Name:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    gridBagSizer22->Add(lbEstimateName, wxGBPosition(1,0), wxGBSpan(), wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    SetName(wxT("ExecutionDialogBase"));
    SetMinSize( wxSize(550,-1) );
    SetSizeHints(600,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    CentreOnParent(wxBOTH);
    // Connect events
    gdExecutions->Connect(wxEVT_GRID_CELL_CHANGING, wxGridEventHandler(ExecutionDialogBase::OngdExecutionsCellChange), NULL, this);
    btAdd->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ExecutionDialogBase::OnbtAddClick), NULL, this);
    btDelete->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ExecutionDialogBase::OnbtDeleteClick), NULL, this);
    
}

ExecutionDialogBase::~ExecutionDialogBase()
{
    gdExecutions->Disconnect(wxEVT_GRID_CELL_CHANGING, wxGridEventHandler(ExecutionDialogBase::OngdExecutionsCellChange), NULL, this);
    btAdd->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ExecutionDialogBase::OnbtAddClick), NULL, this);
    btDelete->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ExecutionDialogBase::OnbtDeleteClick), NULL, this);
    
}

WalletOverviewDialogBase::WalletOverviewDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC898CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* BoxSizer135 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(BoxSizer135);
    
    wxArrayString lsWalletsArr;
    lsWallets = new wxSimpleHtmlListBox(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), lsWalletsArr, wxHLB_DEFAULT_STYLE);
    
    BoxSizer135->Add(lsWallets, 4, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    wxFlexGridSizer* flexGridSizer2137 = new wxFlexGridSizer(3, 2, 0, 0);
    flexGridSizer2137->SetFlexibleDirection( wxBOTH );
    flexGridSizer2137->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2137->AddGrowableCol(1);
    
    BoxSizer135->Add(flexGridSizer2137, 2, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    
    lbName = new wxStaticText(this, wxID_ANY, _("Name:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer2137->Add(lbName, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    txName = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    txName->SetHint(wxT(""));
    #endif
    
    flexGridSizer2137->Add(txName, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    lbObs = new wxStaticText(this, wxID_ANY, _("Obs"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer2137->Add(lbObs, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    txObs = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), wxTE_MULTILINE);
    
    flexGridSizer2137->Add(txObs, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    wxBoxSizer* BoxSizer242 = new wxBoxSizer(wxHORIZONTAL);
    
    BoxSizer135->Add(BoxSizer242, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    
    btEdit = new wxButton(this, wxID_ANY, _("Edit"), wxDefaultPosition, wxSize(-1,-1), 0);
    btEdit->Enable(false);
    
    BoxSizer242->Add(btEdit, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    btAdd = new wxButton(this, wxID_ANY, _("Add"), wxDefaultPosition, wxSize(-1,-1), 0);
    btAdd->Enable(false);
    
    BoxSizer242->Add(btAdd, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    btRemove = new wxButton(this, wxID_ANY, _("Remove"), wxDefaultPosition, wxSize(-1,-1), 0);
    btRemove->Enable(false);
    
    BoxSizer242->Add(btRemove, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    wxBoxSizer* BoxSizer346 = new wxBoxSizer(wxHORIZONTAL);
    
    BoxSizer135->Add(BoxSizer346, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    
    BoxSizer346->Add(0, 0, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    BoxSizer346->Add(0, 0, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    btClose = new wxButton(this, wxID_CANCEL, _("Close"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    BoxSizer346->Add(btClose, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    
    SetName(wxT("WalletOverviewDialogBase"));
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    CentreOnParent(wxBOTH);
    // Connect events
    lsWallets->Connect(wxEVT_LISTBOX, wxCommandEventHandler(WalletOverviewDialogBase::OnLswalletsListbox), NULL, this);
    txName->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(WalletOverviewDialogBase::OnTxnameTextUpdated), NULL, this);
    txObs->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(WalletOverviewDialogBase::OnTxobsTextUpdated), NULL, this);
    btEdit->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(WalletOverviewDialogBase::OnBteditButtonClicked), NULL, this);
    btAdd->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(WalletOverviewDialogBase::OnBtaddButtonClicked), NULL, this);
    btRemove->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(WalletOverviewDialogBase::OnBtremoveButtonClicked), NULL, this);
    
}

WalletOverviewDialogBase::~WalletOverviewDialogBase()
{
    lsWallets->Disconnect(wxEVT_LISTBOX, wxCommandEventHandler(WalletOverviewDialogBase::OnLswalletsListbox), NULL, this);
    txName->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(WalletOverviewDialogBase::OnTxnameTextUpdated), NULL, this);
    txObs->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(WalletOverviewDialogBase::OnTxobsTextUpdated), NULL, this);
    btEdit->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(WalletOverviewDialogBase::OnBteditButtonClicked), NULL, this);
    btAdd->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(WalletOverviewDialogBase::OnBtaddButtonClicked), NULL, this);
    btRemove->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(WalletOverviewDialogBase::OnBtremoveButtonClicked), NULL, this);
    
}

OrcamentoMainFrameBase::OrcamentoMainFrameBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC898CInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    mnMain = new wxMenuBar(0);
    this->SetMenuBar(mnMain);
    
    mnFile = new wxMenu();
    mnMain->Append(mnFile, _("&File"));
    
    mnFileNew = new wxMenuItem(mnFile, wxID_ANY, _("New\tCtrl-N"), _("Create new Database"), wxITEM_NORMAL);
    mnFileNew->SetBitmap(wxArtProvider::GetBitmap(wxART_NEW_DIR, wxART_MENU, wxDefaultSize));
    mnFile->Append(mnFileNew);
    
    mnFileOpen = new wxMenuItem(mnFile, wxID_ANY, _("Open\tCtrl-O"), _("Open a database."), wxITEM_NORMAL);
    mnFileOpen->SetBitmap(wxArtProvider::GetBitmap(wxART_FILE_OPEN, wxART_MENU, wxDefaultSize));
    mnFile->Append(mnFileOpen);
    
    mnFileSave = new wxMenuItem(mnFile, wxID_ANY, _("Save\tCtrl-S"), _("Commit the changed."), wxITEM_NORMAL);
    mnFileSave->SetBitmap(wxArtProvider::GetBitmap(wxART_FILE_SAVE, wxART_MENU, wxDefaultSize));
    mnFile->Append(mnFileSave);
    
    mnFileSaveAs = new wxMenuItem(mnFile, wxID_ANY, _("Save as..."), _("Not implemented yet."), wxITEM_NORMAL);
    mnFile->Append(mnFileSaveAs);
    
    mnFile->AppendSeparator();
    
    mnFileQuit = new wxMenuItem(mnFile, wxID_ANY, _("Quit\tAlt-F4"), _("Quit the application"), wxITEM_NORMAL);
    mnFileQuit->SetBitmap(wxArtProvider::GetBitmap(wxART_QUIT, wxART_MENU, wxDefaultSize));
    mnFile->Append(mnFileQuit);
    
    mnBudget = new wxMenu();
    mnMain->Append(mnBudget, _("Budget"));
    
    mnBudgetCreateNext = new wxMenuItem(mnBudget, wxID_ANY, _("Create Next Budget\tAlt-b"), wxT(""), wxITEM_NORMAL);
    mnBudget->Append(mnBudgetCreateNext);
    
    mnBudgetExecuteNext = new wxMenuItem(mnBudget, wxID_ANY, _("Execute Next Budget"), wxT(""), wxITEM_NORMAL);
    mnBudget->Append(mnBudgetExecuteNext);
    
    mnBudget->AppendSeparator();
    
    mnBudgetExport = new wxMenuItem(mnBudget, wxID_ANY, _("Export Budget"), _("Exports Current Budget"), wxITEM_NORMAL);
    mnBudget->Append(mnBudgetExport);
    
    mnEstimate = new wxMenu();
    mnMain->Append(mnEstimate, _("Estimate"));
    
    mnEstimateAdd = new wxMenuItem(mnEstimate, wxID_ANY, _("Add a Estimate\tAlt-Insert"), _("Insert a new estimate on current budget."), wxITEM_NORMAL);
    mnEstimate->Append(mnEstimateAdd);
    
    mnWallet = new wxMenu();
    mnMain->Append(mnWallet, _("Wallet"));
    
    mnWalletOverview = new wxMenuItem(mnWallet, wxID_ANY, _("Overview\tAlt-w"), wxT(""), wxITEM_NORMAL);
    mnWallet->Append(mnWalletOverview);
    
    mnHelp = new wxMenu();
    mnMain->Append(mnHelp, _("Help"));
    
    mnHelpAbout = new wxMenuItem(mnHelp, wxID_ANY, _("About\tF1"), _("Show info about this application"), wxITEM_NORMAL);
    mnHelp->Append(mnHelpAbout);
    
    sbStatus = new wxStatusBar(this, wxID_ANY, wxSTB_DEFAULT_STYLE);
    sbStatus->SetFieldsCount(5);
    this->SetStatusBar(sbStatus);
    
    cmEstimate = new wxMenu();
    
    cmEstimatesExecute = new wxMenuItem(cmEstimate, wxID_ANY, _("Execute"), wxT(""), wxITEM_NORMAL);
    cmEstimate->Append(cmEstimatesExecute);
    
    cmEstimatesCopySelectedRows = new wxMenuItem(cmEstimate, wxID_ANY, _("Copy Selected Rows to...\tCtrl-Alt-p"), _("Copies all selected rows to anothe budget."), wxITEM_NORMAL);
    cmEstimate->Append(cmEstimatesCopySelectedRows);
    
    cmEstimate->AppendSeparator();
    
    cmEstimatesDelete = new wxMenuItem(cmEstimate, wxID_ANY, _("Delete Estimate"), wxT(""), wxITEM_NORMAL);
    cmEstimate->Append(cmEstimatesDelete);
    
    wxBoxSizer* szMain = new wxBoxSizer(wxHORIZONTAL);
    this->SetSizer(szMain);
    
    wxArrayString lsMonthsArr;
    lsMonths = new wxSimpleHtmlListBox(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), lsMonthsArr, wxHLB_DEFAULT_STYLE);
    
    szMain->Add(lsMonths, 1, wxEXPAND, 0);
    
    gdEstimates = new wxGrid(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxFULL_REPAINT_ON_RESIZE|wxHSCROLL|wxVSCROLL);
    gdEstimates->CreateGrid(0, 0);
    gdEstimates->SetRowLabelAlignment(wxALIGN_RIGHT, wxALIGN_CENTRE);
    gdEstimates->SetColLabelAlignment(wxALIGN_CENTRE, wxALIGN_CENTRE);
    #if wxVERSION_NUMBER >= 2904
    gdEstimates->UseNativeColHeader(true);
    #endif
    gdEstimates->EnableEditing(true);
    
    szMain->Add(gdEstimates, 3, wxEXPAND, 0);
    
    SetName(wxT("OrcamentoMainFrameBase"));
    SetSizeHints(800,600);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    CentreOnParent(wxBOTH);
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(OrcamentoMainFrameBase::OnCloseWindow), NULL, this);
    this->Connect(mnFileNew->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnfilenewMenuSelected), NULL, this);
    this->Connect(mnFileOpen->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnfileopenMenuSelected), NULL, this);
    this->Connect(mnFileSave->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnfilesaveMenuSelected), NULL, this);
    this->Connect(mnFileSaveAs->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnfilesaveasMenuSelected), NULL, this);
    this->Connect(mnFileQuit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnfilequitMenuSelected), NULL, this);
    this->Connect(mnBudgetCreateNext->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnbudgetcreatenextMenuSelected), NULL, this);
    this->Connect(mnBudgetExecuteNext->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnbudgetexecutenextMenuSelected), NULL, this);
    this->Connect(mnBudgetExport->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnbudgetexportMenuSelected), NULL, this);
    this->Connect(mnEstimateAdd->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnestimateaddMenuSelected), NULL, this);
    this->Connect(mnWalletOverview->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnwalletoverviewMenuSelected), NULL, this);
    this->Connect(mnHelpAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnhelpaboutMenuSelected), NULL, this);
    this->Connect(cmEstimatesExecute->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnCmestimatesexecuteMenuSelected), NULL, this);
    this->Connect(cmEstimatesCopySelectedRows->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnCmestimatescopyselectedrowsMenuSelected), NULL, this);
    this->Connect(cmEstimatesDelete->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnCmestimatesdeleteMenuSelected), NULL, this);
    lsMonths->Connect(wxEVT_LISTBOX, wxCommandEventHandler(OrcamentoMainFrameBase::OnLsmonthsListbox), NULL, this);
    gdEstimates->Connect(wxEVT_GRID_CELL_CHANGING, wxGridEventHandler(OrcamentoMainFrameBase::OnGdestimatesGridCellChanging), NULL, this);
    gdEstimates->Connect(wxEVT_GRID_CELL_RIGHT_CLICK, wxGridEventHandler(OrcamentoMainFrameBase::OnGdestimatesGridCellRightClick), NULL, this);
    gdEstimates->Connect(wxEVT_GRID_CELL_LEFT_DCLICK, wxGridEventHandler(OrcamentoMainFrameBase::OnGdestimatesGridCellLeftDclick), NULL, this);
    
}

OrcamentoMainFrameBase::~OrcamentoMainFrameBase()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(OrcamentoMainFrameBase::OnCloseWindow), NULL, this);
    this->Disconnect(mnFileNew->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnfilenewMenuSelected), NULL, this);
    this->Disconnect(mnFileOpen->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnfileopenMenuSelected), NULL, this);
    this->Disconnect(mnFileSave->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnfilesaveMenuSelected), NULL, this);
    this->Disconnect(mnFileSaveAs->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnfilesaveasMenuSelected), NULL, this);
    this->Disconnect(mnFileQuit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnfilequitMenuSelected), NULL, this);
    this->Disconnect(mnBudgetCreateNext->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnbudgetcreatenextMenuSelected), NULL, this);
    this->Disconnect(mnBudgetExecuteNext->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnbudgetexecutenextMenuSelected), NULL, this);
    this->Disconnect(mnBudgetExport->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnbudgetexportMenuSelected), NULL, this);
    this->Disconnect(mnEstimateAdd->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnestimateaddMenuSelected), NULL, this);
    this->Disconnect(mnWalletOverview->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnwalletoverviewMenuSelected), NULL, this);
    this->Disconnect(mnHelpAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnMnhelpaboutMenuSelected), NULL, this);
    this->Disconnect(cmEstimatesExecute->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnCmestimatesexecuteMenuSelected), NULL, this);
    this->Disconnect(cmEstimatesCopySelectedRows->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnCmestimatescopyselectedrowsMenuSelected), NULL, this);
    this->Disconnect(cmEstimatesDelete->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(OrcamentoMainFrameBase::OnCmestimatesdeleteMenuSelected), NULL, this);
    lsMonths->Disconnect(wxEVT_LISTBOX, wxCommandEventHandler(OrcamentoMainFrameBase::OnLsmonthsListbox), NULL, this);
    gdEstimates->Disconnect(wxEVT_GRID_CELL_CHANGING, wxGridEventHandler(OrcamentoMainFrameBase::OnGdestimatesGridCellChanging), NULL, this);
    gdEstimates->Disconnect(wxEVT_GRID_CELL_RIGHT_CLICK, wxGridEventHandler(OrcamentoMainFrameBase::OnGdestimatesGridCellRightClick), NULL, this);
    gdEstimates->Disconnect(wxEVT_GRID_CELL_LEFT_DCLICK, wxGridEventHandler(OrcamentoMainFrameBase::OnGdestimatesGridCellLeftDclick), NULL, this);
    
}
